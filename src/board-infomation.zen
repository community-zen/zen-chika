///////////////////////////////////////////
// @brief  Raspberry Piボード情報を管理する
// @note
//   ファイルシステムから各種情報を取得
///////////////////////////////////////////

const std = @import ("std");
const builtin = @import ("builtin");
const is_test = builtin.is_test;
const fs = std.fs;
const heap = std.heap;
const mem = std.mem;
const math = std.math;

pub const PiModel = enum (u32) {
    PI_MODEL_A = 0x0,
    PI_MODEL_B,
    PI_MODEL_AP,
    PI_MODEL_BP,
    PI_MODEL_2B,
    PI_MODEL_ALPHA,
    PI_MODEL_CM,
    // 0x7は未定義である
    PI_MODEL_3B = 0x8,
    PI_MODEL_ZERO,
    PI_MODEL_CM3,
    // 0xbは未定義である
    PI_MODEL_ZERO_W = 0xc,
    PI_MODEL_3BP,
    PI_MODEL_3AP,
    PI_MODEL_INTERNAL_USE_ONLY,
    PI_MODEL_CM3P,
    PI_MODEL_4B,
    PI_MODEL_UNKNOWN,

    ///////////////////////////////////////////
    // @brief  モデル情報を取得
    // @note
    //   リビジョン情報からモデルを判断し返す
    ///////////////////////////////////////////
    pub fn get_from_revision (revison:u32) PiModel {
        const model : u32 = (revison & (0xFF <<  4)) >>  4 ;
        return @intToEnum (PiModel,model);
    }

    ///////////////////////////////////////////
    // @brief  モデル情報を文字列として取得
    // @note
    //   リビジョン情報からモデル名を文字列として判断し返す
    ///////////////////////////////////////////
    pub fn get_names (comptime model: PiModel) []u8 {
        return @tagName (model);
    }
};

test "PiModel" {

    std.testing.equal (PiModel.PI_MODEL_AP, PiModel.get_from_revision (0x900021));
    std.testing.equal (PiModel.PI_MODEL_ZERO, PiModel.get_from_revision (0x920092));
    std.testing.equal (PiModel.PI_MODEL_2B, PiModel.get_from_revision (0xa22042));
    std.testing.equal (PiModel.PI_MODEL_3B, PiModel.get_from_revision (0xa02082));
    std.testing.equal (PiModel.PI_MODEL_4B, PiModel.get_from_revision (0xc03112));

    std.testing.equalSlices (u8, "PI_MODEL_3B", PiModel.get_names (PiModel.PI_MODEL_3B));
}

pub const PiMaker = enum (u32) {
    PI_MAKER_SONY_UK = 0x0,
    PI_MAKER_EGOMAN,
    PI_MAKER_EMBEST,
    PI_MAKER_SONY_JAPAN,
    PI_MAKER_STADIUM,
    PI_MAKER_UNKNOWN,

    ///////////////////////////////////////////
    // @brief  メーカー情報を取得
    // @note
    //   リビジョン情報からメーカーを判断し返す
    ///////////////////////////////////////////
    pub fn get_from_revision (revison:u32) PiMaker {
        const maker : u32 = (revison & (0x0F << 16)) >> 16 ;

        return switch (maker) {
            0x0 => PiMaker.PI_MAKER_SONY_UK,
            0x1 => PiMaker.PI_MAKER_EGOMAN,
            0x2 => PiMaker.PI_MAKER_EMBEST,
            0x3 => PiMaker.PI_MAKER_SONY_JAPAN,
            0x4 => PiMaker.PI_MAKER_EMBEST,
            0x5 => PiMaker.PI_MAKER_STADIUM,
            else => PiMaker.PI_MAKER_UNKNOWN,
        };
    }

    ///////////////////////////////////////////
    // @brief  メーカー情報を文字列として取得
    // @note
    //   リビジョン情報からメーカー情報を文字列として判断し返す
    ///////////////////////////////////////////
    pub fn get_names (comptime maker: PiMaker) []u8 {
        return @tagName (maker);
    }
};

test "PiMaker" {

    std.testing.equal (PiMaker.PI_MAKER_SONY_UK, PiMaker.get_from_revision (0x900021));
    std.testing.equal (PiMaker.PI_MAKER_EMBEST, PiMaker.get_from_revision (0x920092));
    std.testing.equal (PiMaker.PI_MAKER_EMBEST, PiMaker.get_from_revision (0xa21041));
    std.testing.equal (PiMaker.PI_MAKER_SONY_JAPAN, PiMaker.get_from_revision (0xa32082));
    std.testing.equal (PiMaker.PI_MAKER_SONY_UK, PiMaker.get_from_revision (0xc03112));

}

pub const PiVersion = enum (u32) {
    PI_VERSION_1 = 0x0,
    PI_VERSION_1_1,
    PI_VERSION_1_2,
    PI_VERSION_1_3,
    PI_VERSION_2,
    PI_VERSION_UNKNOWN,

    ///////////////////////////////////////////
    // @brief  バージョン情報を取得
    // @note
    //   リビジョン情報からバージョンを判断し返す
    ///////////////////////////////////////////
    pub fn get_from_revision (revison:u32) PiVersion {
        const version : u32 = (revison & (0x0F <<  0)) >>  0 ;
        return @intToEnum (PiVersion,version);
    }

    ///////////////////////////////////////////
    // @brief  バージョン情報を文字列として取得
    // @note
    //   リビジョン情報からバージョン情報を文字列として判断し返す
    ///////////////////////////////////////////
    pub fn get_names (comptime version: PiMaker) []u8 {
        return @tagName (version);
    }
};

test "PiVersion" {

    std.testing.equal (PiVersion.PI_VERSION_1_2, PiVersion.get_from_revision (0xa02082));

}

pub const BoardInfomation = struct {

    pub model:PiModel,
    pub maker:PiMaker,
    pub version:PiVersion,
    pub baseAddress:usize,

    const Self = @This ();

    ///////////////////////////////////////////
    // @brief  初期化処理
    // @note
    //   ファイルシステムから各種情報を取得する
    ///////////////////////////////////////////
    pub fn init () BoardInfomation {


        // CPUの情報を取得する
        const cpuinfo = getCpuinfo ();
        defer heap.free (heap.page_allocator, cpuinfo);

        // CPU情報からリビジョン情報を取得する
        const revisionSlice = getRevisionLine (cpuinfo);
        const revisionNum = revitionSliceToNumber (revisionSlice) ;

        // ラズベリーパイの型番、メーカ、バージョンの取得
        const model = PiModel.get_from_revision (revisionNum);
        const maker = PiMaker.get_from_revision (revisionNum);
        const version = PiVersion.get_from_revision (revisionNum);

        // 型番からレジスタのベースアドレスを取得する
        const baseAddress = conv_to_base_address_from_model (model);

        return Self {
            .model = model,
            .maker = maker,
            .version = version,
            .baseAddress = baseAddress,
        };
    }
    ///////////////////////////////////////////
    // @brief  cpuinfoを読み込み、内容を返す
    // @note
    //   allocで確保した領域の開放について
    //    正常終了 -> 呼び出し元で開放
    //    異常終了 -> この関数内で開放
    ///////////////////////////////////////////
    fn getCpuinfo () []u8 {

        // (TODO)テスト実行時のみ参照ファイルを変更する(他に良い方法があれば置き換え)
        var CPU_INFO_PATH : []u8 = undefined;
        if (!is_test) {
            CPU_INFO_PATH = "/proc/cpuinfo"[0..];
        } else {
            CPU_INFO_PATH = "src/test/cpuinfo"[0..];
        }

        // const file = fs.File.openRead(CPU_INFO_PATH) catch unreachable;
        const file = std.fs.cwd ().openFile (CPU_INFO_PATH, .{}) catch unreachable;
        defer file.close ();

        // (TODO)バッファサイズ1500は、根拠がないため今後改善する。
        // @intCast(usize, try file.getEndPos());では、ファイルサイズ取得に失敗した
        const buf = heap.alloc (heap.page_allocator, u8, 1500) catch unreachable;
        const cpuinfo = file.read (buf) catch unreachable;
        errdefer heap.free (heap.page_allocator, cpuinfo);

        return cpuinfo;

    }
    ///////////////////////////////////////////
    // @brief  検索文字列から始まる一行を特定し、その後に続く改行文字までの内容を返す
    // @note
    //   検索文字列から始まる一行が複数行あった場合は、初めにヒットしたものが選択される
    ///////////////////////////////////////////
    fn getRevisionLine (cpuinfo:[]u8) []u8 {

        var start   : usize = 0;
        var end     : usize = 0;
        const keyword = "Revision\t: ";

        return while (end < cpuinfo.len) : (end += 1) {

            if (cpuinfo[end] == '\n') {

                const line = cpuinfo[start..end];

                // 先頭文字がキーワードと一致する時、そこからRevisionコードだけを取得する
                if (mem.startsWith(u8, line, keyword)) {
                    break line[keyword.len..];
                }
                start = end + 1;

            }

        } else {
            // If the cpuinfo is passed correctly, it does not come here.
            std.debug.panic ("{}", .{"Don't find 'revision' line in the argument file."});
        };
    }

    ///////////////////////////////////////////
    // @brief  文字列を数値型にキャストする
    // @note
    ///////////////////////////////////////////
    fn revitionSliceToNumber (revision:[]u8)  u32 {

        var digit   : u32 = 0;
        var number  : u32 = 0;

        if (revision.len > 8) {
            std.debug.panic ("{}", .{"The revistion number is no more than 8 digits."});
        }

        const revision_len = @intCast (u32,revision.len);

        while (digit < revision_len) : ( digit+=1 ) {

            const cnv_num = switch (revision[digit]) {
                '0'...'9' => (revision[digit] - '0') + 0x0,
                'a'...'z' => (revision[digit] - 'a') + 0xa,
                else      => {
                    // If it's a slice type hexadecimal number, it does not come here.
                    std.debug.panic ("{}", .{"Failed to convert."});
                },
            };

            const base = 16;
            const exponent = ((revision_len - 1) - digit);
            number += cnv_num * math.pow (u32, base, exponent);

        }

        return number;
    }
    ///////////////////////////////////////////
    // @brief  型番からベースアドレスを判断する
    // @note
    ///////////////////////////////////////////
    fn conv_to_base_address_from_model (model:PiModel)  usize {

        const GPIO_PERI_BASE_OLD  = 0x20000000;
        const GPIO_PERI_BASE_2835 = 0x3F000000;
        const GPIO_PERI_BASE_2711 = 0xFE000000;

        return switch (model) {
            PiModel.PI_MODEL_A, PiModel.PI_MODEL_B,
            PiModel.PI_MODEL_AP, PiModel.PI_MODEL_BP,
            PiModel.PI_MODEL_ALPHA, PiModel.PI_MODEL_CM,
            PiModel.PI_MODEL_ZERO, PiModel.PI_MODEL_ZERO_W => GPIO_PERI_BASE_OLD ,

            PiModel.PI_MODEL_4B => GPIO_PERI_BASE_2711 ,

            else => GPIO_PERI_BASE_2835,
        };
    }

};

test "BoardInfomation" {
    const BI = BoardInfomation.init ();

    std.testing.equal (BI.model, PiModel.PI_MODEL_3B);
    std.testing.equal (BI.maker, PiMaker.PI_MAKER_SONY_JAPAN);
    std.testing.equal (BI.version, PiVersion.PI_VERSION_1_2);

}
