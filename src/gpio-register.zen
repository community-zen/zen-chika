const std = @import("std");
const testing = std.testing;
const mem = std.mem;
const math = std.math;
const os = std.os;

pub const GpioRegister = packed struct {
    gpfsel0: u32 = 0,
    gpfsel1: u32 = 0,
    gpfsel2: u32 = 0,
    gpfsel3: u32 = 0,
    gpfsel4: u32 = 0,
    gpfsel5: u32 = 0,

    reserved0: [4]u8 = [_]u8{0}**4,
    gpset0: u32 = 0,
    gpset1: u32 = 0,

    reserved1: [4]u8 = [_]u8{0}**4,
    gpclr0: u32 = 0,
    gpclr1: u32 = 0,

    reserved2: [4]u8 = [_]u8{0}**4,
    gplev0: u32 = 0,
    gplev1: u32 = 0,

    reserved3: [4]u8 = [_]u8{0}**4,
    other:[100]u8 =  [_]u8{0}**100,

    const Self = @This();
    const OFFSET : u32 = 0x00200000;
    const BLOCK_SIZE = (4 * 1024);

    // メモリ全体を示す特殊ファイルのパスを指定する
    var MEM_PATH = "/dev/mem"[0..];

    // (TODO)/dev/gpiomemにも対応し、管理者権限が必要ないようにする
    pub fn get_ptr( baseAddress:usize ) !*volatile GpioRegister {

        const fd = try os.open(MEM_PATH, os.O_RDWR | os.O_SYNC | os.O_CLOEXEC,  0);
        errdefer os.close(fd);

        const bytes = try os.mmap(
            null,
            BLOCK_SIZE,
            os.PROT_READ | os.PROT_WRITE,
            os.MAP_SHARED,
            fd,
            baseAddress + OFFSET,
        );
        errdefer os.munmap(bytes);


        return @ptrCast(*volatile GpioRegister,bytes.ptr);
    }
};

test "GpioRegister" {

    // テスト用のファイルを指定する(仮)
    GpioRegister.MEM_PATH = "src/test/mem"[0..];
    const ptr = GpioRegister.get_ptr(0x3F000000) catch {
        @panic("There was an error in GpioRegister.");
    };
    std.testing.ok( @intCast( usize, 0x3F000000+GpioRegister.OFFSET) < @ptrToInt( ptr )  );

    std.testing.equal( @is(usize, 0x00), @byteOffsetOf(GpioRegister, "gpfsel0") );
    std.testing.equal( @is(usize, 0x04), @byteOffsetOf(GpioRegister, "gpfsel1") );
    std.testing.equal( @is(usize, 0x08), @byteOffsetOf(GpioRegister, "gpfsel2") );
    std.testing.equal( @is(usize, 0x0C), @byteOffsetOf(GpioRegister, "gpfsel3") );
    std.testing.equal( @is(usize, 0x10), @byteOffsetOf(GpioRegister, "gpfsel4") );
    std.testing.equal( @is(usize, 0x14), @byteOffsetOf(GpioRegister, "gpfsel5") );

    std.testing.equal( @is(usize, 0x1C), @byteOffsetOf(GpioRegister, "gpset0") );
    std.testing.equal( @is(usize, 0x20), @byteOffsetOf(GpioRegister, "gpset1") );

    std.testing.equal( @is(usize, 0x28), @byteOffsetOf(GpioRegister, "gpclr0") );
    std.testing.equal( @is(usize, 0x2C), @byteOffsetOf(GpioRegister, "gpclr1") );

    std.testing.equal( @is(usize, 0x34), @byteOffsetOf(GpioRegister, "gplev0") );
    std.testing.equal( @is(usize, 0x38), @byteOffsetOf(GpioRegister, "gplev1") );

}

