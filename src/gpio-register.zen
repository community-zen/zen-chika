///////////////////////////////////////////
// @brief  レジスタに対して書き込み処理を行う
// @note
//   gpioから受けた書き込み指示に沿ってレジスタへの書き込み処理を行う
///////////////////////////////////////////

const std = @import("std");
const testing = std.testing;

pub const GpioRegister = packed struct {
    gpfsel0: u32 = 0,
    gpfsel1: u32 = 0,
    gpfsel2: u32 = 0,
    gpfsel3: u32 = 0,
    gpfsel4: u32 = 0,
    gpfsel5: u32 = 0,

    reserved0: [4]u8 = [_]u8{0}**4,
    gpset0: u32 = 0,
    gpset1: u32 = 0,

    reserved1: [4]u8 = [_]u8{0}**4,
    gpclr0: u32 = 0,
    gpclr1: u32 = 0,

    reserved2: [4]u8 = [_]u8{0}**4,
    gplev0: u32 = 0,
    gplev1: u32 = 0,

    reserved3: [4]u8 = [_]u8{0}**4,
    other:[100]u8 =  [_]u8{0}**100,

    const Self = @This();

    pub const OFFSET : u32 = 0x00200000;

    // メモリ全体を示す特殊ファイルのパスを指定する
    pub const MEM_PATH = "/dev/mem"[0..];
    pub const GPIOMEM_PATH = "/dev/gpiomem"[0..];

};

test "GpioRegister" {

    std.testing.equal( @is(usize, 0x00), @byteOffsetOf(GpioRegister, "gpfsel0") );
    std.testing.equal( @is(usize, 0x04), @byteOffsetOf(GpioRegister, "gpfsel1") );
    std.testing.equal( @is(usize, 0x08), @byteOffsetOf(GpioRegister, "gpfsel2") );
    std.testing.equal( @is(usize, 0x0C), @byteOffsetOf(GpioRegister, "gpfsel3") );
    std.testing.equal( @is(usize, 0x10), @byteOffsetOf(GpioRegister, "gpfsel4") );
    std.testing.equal( @is(usize, 0x14), @byteOffsetOf(GpioRegister, "gpfsel5") );

    std.testing.equal( @is(usize, 0x1C), @byteOffsetOf(GpioRegister, "gpset0") );
    std.testing.equal( @is(usize, 0x20), @byteOffsetOf(GpioRegister, "gpset1") );

    std.testing.equal( @is(usize, 0x28), @byteOffsetOf(GpioRegister, "gpclr0") );
    std.testing.equal( @is(usize, 0x2C), @byteOffsetOf(GpioRegister, "gpclr1") );

    std.testing.equal( @is(usize, 0x34), @byteOffsetOf(GpioRegister, "gplev0") );
    std.testing.equal( @is(usize, 0x38), @byteOffsetOf(GpioRegister, "gplev1") );

}

