const std = @import("std");
const ok = std.testing.ok;
const testing = std.testing;
const fs = std.fs;
const heap = std.heap;
const Allocator = heap.Allocator;
const mem = std.mem;
const math = std.math;
const os = std.os;

const Gpio = @import("gpio.zen");
const GPIO = Gpio.Gpio;

//配列でいいのでは？
// pub const GpioPin = enum(u32) {
//     PIN_0 = 17,
//     PIN_1 = 18,
//     PIN_2 = 21,
//     PIN_3 = 22,
//     PIN_4 = 23,
//     PIN_5 = 24,
//     PIN_6 = 25,
//     PIN_7 = 4,

//     pub fn to_phys_pin(comptime self:GpioPin) comptime_int {

//         const maker : u32 = (revison & (0x0F << 16)) >> 16 ;
//         std.debug.warn("maker = {}\n", maker);

//         return @intToEnum(comptime_intcomptime_int,maker);
//     }
// };

pub const GpioPort = struct {
    gpio:GPIO,
    const Self = @This();

    //一旦−１のところは５０で置換
    const pinToGpioR1 = [64]u32
    {
        17, 18, 21, 22, 23, 24, 25, 4,// From the Original Wiki - GPIO 0 through 7: wpi  0 -  7
        0,  1, // I2C  - SDA1, SCL1 wpi  8 -  9
        8,  7, // SPI  - CE1, CE0 wpi 10 - 11
        10,  9, 11,  // SPI  - MOSI, MISO, SCLK wpi 12 - 14
        14, 15, // UART - Tx, Rx wpi 15 - 16

        // Padding:

            50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, // ... 31
        50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, // ... 47
        50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, // ... 63
    } ;

    pub fn init() anyerror!GpioPort {
        return Self{
            .gpio = GPIO.init() catch unreachable,
        };
    }
    pub fn pin_mode(virPin:u32,mode:u32) anyerror!void {
        const physPin = pinToGpioR1[virPin];
        GPIO.pin_mode(physPin,mode) catch unreachable;
        return;
    }
    pub fn digital_write(virPin:u32,value:u1) anyerror!void {
        const physPin = pinToGpioR1[virPin];

        if(0==value){
            GPIO.reg_clr(physPin) catch unreachable;
        }else if(1==value){
            GPIO.reg_set(physPin) catch unreachable;
        }
        return;
    }
    pub fn digital_Read(virPin:u32) anyerror!void {
        const physPin = pinToGpioR1[virPin];
        //未実装
        return;
    }
};

// test "GpioPort" {
//     const gpioPort = GpioPort.init() catch unreachable;
// }

